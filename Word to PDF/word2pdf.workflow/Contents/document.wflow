<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>523</string>
	<key>AMApplicationVersion</key>
	<string>2.10</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.0.2</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run AppleScript.action</string>
				<key>ActionName</key>
				<string>Run AppleScript</string>
				<key>ActionParameters</key>
				<dict>
					<key>source</key>
					<string># credits:# https://stackoverflow.com/questions/41886380/using-applescript-to-open-ms-powerpoint-2016-file# https://superuser.com/questions/670893/get-path-of-parent-folder-of-script-location-applescripton saveWordDocAsPDF(documentPath, pdfPath)    set inFile to documentPath as alias -- this line must be outside of the 'tell application "Microsoft Word"' block to avoid issues with the open command        tell application "Microsoft Word"                launch -- open Word        open inFile -- opens file        # create empty file to avoid issues with save command		set pdfPath to my createEmptyFile(pdfPath) # the handler return a file object (this line must be inside of the 'tell application "Microsoft PowerPoint"' block to avoid issues with the saving command)                -- Wait a bit for the document to open; sometimes necessary to avoid failures        delay 1                -- Get a reference to the opened document        set theDoc to the active document                -- Word uses 'file format' parameter to specify the format in which the document will be saved        save as theDoc file name pdfPath file format format PDF                -- Close the document after saving        -- close theDoc            end tellend saveWordDocAsPDFon createEmptyFile(eFile)		# create file (this will do nothing if the file exists)	do shell script "touch " &amp; quoted form of POSIX path of eFile		# sometimes necesarry to avoid a failure	delay 1		# returns empty file	return (POSIX path of eFile) as POSIX file	end createEmptyFile# gets output path from input path (replace extension with .pdf and return as string)on getOutputPath(docPath)		# casts to string, just in case	set dpath to docPath as string	if dpath ends with ".docx" then		# replace pptx		return (text 1 thru -6 of dpath) &amp; "-docx.pdf"	else		# replace ppt		return (text 1 thru -5 of dpath) &amp; "-doc.pdf"	end ifend getOutputPath# retrive parent directory of given filepathon getParentDirectory(filePath)	tell application "Finder"				# retrives parent directory of given filepath		set parentDirectory to POSIX path of ((filePath as text) &amp; "::")				# debug: show alert with parent directory		-- set theDialogText to "parent folder: [" &amp; (parentDirectory) &amp; "]" 		-- display dialog theDialogText			end tell	return parentDirectory	end getParentDirectoryon movePowerPointFilesToSubfolder(sourceFolder, fileToMove, subFolderName)	tell application "Finder"		# convert the POSIX path of the source folder to an alias for Finder operations		set sourceFolderPath to POSIX file sourceFolder as alias		# concatenate the source folder's path with the subfolder name to create the full path of the subfolder		set subFolderFullPath to sourceFolderPath &amp; subFolderName as string        delay 1				# check if the subfolder exists, create it if not		if not (exists folder subFolderFullPath) then			make new folder at sourceFolderPath with properties {name:subFolderName}		end if				# Move file to the subfolder		move fileToMove to subFolderFullPath			end tellend movePowerPointFilesToSubfolder# this "run" loop defines what happens when triggered from quick actionson run {input, parameters}		repeat with i in input		set inPath to i as string				# debug: display input path		-- set theDialogText to "input: [" &amp; inPath &amp; "]"		-- display dialog theDialogText				# calculate output path for current file		set outPath to getOutputPath(inPath)				# gets parent directory of current file (kinda redundant but it works)		set parentDir to getParentDirectory(i)				# save converted PDF in original directory		saveWordDocAsPDF(inPath, outPath)				# move powerpoint files into subfolder		#movePowerPointFilesToSubfolder(parentDir, inPath, "word files")			end repeat		# quit powerpoint	tell application "Microsoft Word"		quit	end tell	end run</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.RunScript</string>
				<key>CFBundleVersion</key>
				<string>1.0.2</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunScriptAction</string>
				<key>InputUUID</key>
				<string>53FEA3D6-75A2-496C-860A-02209BA0CCD1</string>
				<key>Keywords</key>
				<array>
					<string>Run</string>
				</array>
				<key>OutputUUID</key>
				<string>AC46778E-7FD4-4F76-AD46-00014C91B290</string>
				<key>UUID</key>
				<string>8CF81732-403A-4BD0-8813-80526F599652</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<string>on run {input, parameters}
	
	(* Your script goes here *)
	
	return input
end run</string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<integer>1</integer>
				<key>location</key>
				<string>751.250000:368.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run AppleScript.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>connectors</key>
	<dict/>
	<key>workflowMetaData</key>
	<dict>
		<key>applicationBundleIDsByPath</key>
		<dict/>
		<key>applicationPaths</key>
		<array/>
		<key>inputTypeIdentifier</key>
		<string>com.apple.Automator.fileSystemObject</string>
		<key>outputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>presentationMode</key>
		<integer>15</integer>
		<key>processesInput</key>
		<false/>
		<key>serviceInputTypeIdentifier</key>
		<string>com.apple.Automator.fileSystemObject</string>
		<key>serviceOutputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>serviceProcessesInput</key>
		<false/>
		<key>systemImageName</key>
		<string>NSActionTemplate</string>
		<key>useAutomaticInputType</key>
		<false/>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.servicesMenu</string>
	</dict>
</dict>
</plist>
